(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{195:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"🍭-js-学习"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🍭-js-学习","aria-hidden":"true"}},[t._v("#")]),t._v(" 🍭 JS 学习")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN web docs"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"_1-定义类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义类","aria-hidden":"true"}},[t._v("#")]),t._v(" 1 定义类")]),t._v(" "),s("p",[t._v("类实际上是个“特殊的函数”。类语法有两个组成部分：类表达式和类声明。")]),t._v(" "),s("h3",{attrs:{id:"_1-1-类声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-类声明","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.1 类声明")]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",[t._v("类声明：定义一个类的一种方法")])]),t._v(" "),s("ul",[s("li",[t._v("类声明不能提升")])]),t._v(" "),s("h3",{attrs:{id:"_1-2-类表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-类表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.2 类表达式")]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",[t._v("类表达式：一个表达式是定义一个类的另一种方式")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/* 匿名类 */ \nlet Rectangle = class {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\n\n/* 命名的类 */ \nlet Rectangle = class Rectangle {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\n")])])]),s("ul",[s("li",[t._v("类表达式不能提升")])]),t._v(" "),s("h3",{attrs:{id:"_1-2-类体和方法定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-类体和方法定义","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.2 类体和方法定义")]),t._v(" "),s("h4",{attrs:{id:"严格模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#严格模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 严格模式")]),t._v(" "),s("p",[t._v("类声明和类表达式的主体都执行在严格模式下。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('\x3c!-- 开启 --\x3e\n// 整个脚本都开启严格模式的语法\n"use strict";\nvar v = "Hi!  I\'m a strict mode script!";\n')])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('function strict() {\n  // 函数级别严格模式语法\n  \'use strict\';\n  function nested() { \n    return "And so am I!"; \n  }\n  return "Hi!  I\'m a strict mode function!  " + nested();\n}\n\nfunction notStrict() { \n  return "I\'m not strict."; \n }\n')])])]),s("div",{staticClass:"tip custom-block"},[s("ul",[s("li",[t._v("变化")])]),t._v(" "),s("ol",[s("li",[t._v("严格模式下无法再意外创建全局变量。")]),t._v(" "),s("li",[t._v("严格模式会引起静默失败的赋值操作抛出异常。（给不可写属性赋值，给只读属性赋值赋值，给不可扩展对象的新属性赋值）。")]),t._v(" "),s("li",[t._v("试图删除不可删除的属性时会抛出异常。")]),t._v(" "),s("li",[t._v("要求一个对象内的所有属性名在对象内必须统一。")]),t._v(" "),s("li",[t._v("要求函数的参数名唯一。")]),t._v(" "),s("li",[t._v("禁止八进制数字语法。")]),t._v(" "),s("li",[t._v("禁止设置 "),s("code",[t._v("primitive")]),t._v(" 值的属性。")])])]),t._v(" "),s("div",{staticClass:"warning custom-block"},[s("ul",[s("li",[t._v("使用")])]),t._v(" "),s("ol",[s("li",[t._v("严格模式禁用 "),s("code",[t._v("with")]),t._v("。")])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("with")]),t._v(" 通常被当作重复引用同一个对象中的多个属性的快捷方式，可以不需要重复引用对象本身。\n缺点：\n导致数据泄漏、性能下降")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("严格模式下的 "),s("code",[t._v("eval")]),t._v(" 不再为上层范围引入新变量。")]),t._v(" "),s("li",[t._v("严格模式禁止删除声明变量。")])])]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("ul",[s("li",[t._v("安全")])]),t._v(" "),s("ol",[s("li",[t._v("在严格模式下通过 "),s("code",[t._v("this")]),t._v(" 传递给一个函数的值不会被强制转换为一个对象。")]),t._v(" "),s("li",[t._v("在严格模式中再也不能通过广泛实现的ECMAScript扩展“游走于”JavaScript的栈中。")]),t._v(" "),s("li",[t._v("严格模式下的arguments不会再提供访问与调用这个函数相关的变量的途径。")])])]),t._v(" "),s("h4",{attrs:{id:"构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),s("p",[s("code",[t._v("constructor")]),t._v(" 方法用于创建和初始化一个由 "),s("code",[t._v("class")]),t._v(" 创建的对象，一个类只能拥有一个名为 "),s("code",[t._v("constructor")]),t._v(" 的特殊方法。")]),t._v(" "),s("p",[t._v("一个构造函数可以使用 "),s("code",[t._v("super")]),t._v(" 来调用一个父类的构造函数。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('- 使用 `constructor` 方法\nclass Square extends Polygon {\n  constructor(length) {\n    // 在这里, 它调用了父类的构造函数, 并将 lengths 提供给 Polygon 的"width"和"height"\n    super(length, length);\n    // 注意: 在派生类中, 必须先调用 super() 才能使用 "this"。\n    // 忽略这个，将会导致一个引用错误。\n    this.name = \'Square\';\n  }\n  get area() {\n    return this.height * this.width;\n  }\n  set area(value) {\n    // 注意：不可使用 this.area = value\n    // 否则会导致循环call setter方法导致爆栈\n    this._area = value;\n  }\n}\n')])])]),s("div",{staticClass:"tip custom-block"},[s("ul",[s("li",[t._v("对于基类，默认构造函数")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("constructor() {}\n")])])]),s("ul",[s("li",[t._v("对于派生类，默认构造函数")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("constructor(...args) {\n  super(...args);\n}\n")])])])]),t._v(" "),s("h4",{attrs:{id:"原型方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 原型方法")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Rectangle {\n    // constructor\n    constructor(height, width) {\n        this.height = height;\n        this.width = width;\n    }\n    // Getter\n    get area() {\n        return this.calcArea()\n    }\n    // Method\n    calcArea() {\n        return this.height * this.width;\n    }\n}\nconst square = new Rectangle(10, 10);\n\nconsole.log(square.area);\n// 100\n")])])]),s("h4",{attrs:{id:"静态方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 静态方法")]),t._v(" "),s("p",[s("code",[t._v("static")]),t._v(" 关键字用来定义一个类的一个静态方法。调用静态方法不需要实例化该类，但不能通过一个类实例调用静态方法。静态方法通常用于为一个应用程序创建工具函数。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  static distance(a, b) {\n    const dx = a.x - b.x;\n    const dy = a.y - b.y;\n\n    return Math.hypot(dx, dy);\n  }\n}\n\nconst p1 = new Point(5, 5);\nconst p2 = new Point(10, 10);\n\nconsole.log(Point.distance(p1, p2));\n")])])]),s("h2",{attrs:{id:"_2-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 2 函数")])])},[],!1,null,null,null);a.default=n.exports}}]);